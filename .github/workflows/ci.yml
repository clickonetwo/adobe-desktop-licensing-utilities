name: ci

on: [workflow_dispatch, push, pull_request]

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        arch: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin, x86_64-pc-windows-msvc]
        include:
          - arch: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - arch: x86_64-pc-windows-msvc
            os: windows-latest
          - arch: x86_64-apple-darwin
            os: macos-latest
          - arch: aarch64-apple-darwin
            os: macos-latest

    steps:
      - name: upgrade XCode
        uses: maxim-lobanov/setup-xcode@v1
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          xcode-version: latest-stable

      - name: XCode build target to aarch64-apple-darwin
        run: |
          echo SDKROOT=$(xcrun --show-sdk-path) >> $GITHUB_ENV
          echo MACOSX_DEPLOYMENT_TARGET=$(xcrun --show-sdk-platform-version) >> $GITHUB_ENV
        if: ${{ matrix.arch == 'aarch64-apple-darwin' }}

      - name: fetch head
        uses: actions/checkout@v2

      - name: install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.arch }}
          toolchain: stable
          components: rustfmt, clippy

      - name: Format check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Test libraries (except when cross-compiling on mac)
        uses: actions-rs/cargo@v1
        if: ${{ matrix.arch != 'aarch64-apple-darwin' }}
        with:
          command: test
          args: --target ${{ matrix.arch }} --workspace --lib -- --nocapture

      - name: Build release adlu-proxy (all platforms)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.arch }} --package adlu-proxy  --release --locked

      - name: Build release adlu-decoder (mac only for now, until windows libngl is built)
        uses: actions-rs/cargo@v1
        if: ${{ matrix.arch != 'x86_64-unknown-linux-gnu' }}
        with:
          command: build
          args: --target ${{ matrix.arch }} --package adlu-decoder --release --locked

      - name: Upload executables
        uses: actions/upload-artifact@v2
        with:
          name: executables
          path: |
            target/**/adlu-decoder
            target/**/adlu-decoder.exe
            target/**/adlu-proxy
            target/**/adlu-proxy.exe
